// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ChoreType {
  Bathroom
  Kitchen
  Bedroom
  Corridor
  Other
}

enum AssignmentStatus {
  Pending
  Completed
}

enum Role {
  Standard
  Admin
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is only needed for MongoDB
  email           String            @unique
  emailVerified   DateTime?         @map("email_verified")
  name            String            @unique
  role            Role              @default(Standard)
  password        String
  salt            String
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  payments        Payment[]
  ChoreAssignment ChoreAssignment[]
  accounts        Account[]
  sessions        Session[]

  @@map("users")
}

model Chore {
  id              String            @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is only needed for MongoDB
  title           String
  description     String
  type            ChoreType
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  ChoreAssignment ChoreAssignment[]
}

model ChoreAssignment {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  chore     Chore            @relation(fields: [choreId], references: [id])
  choreId   String
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  status    AssignmentStatus
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

model Payment {
  id String @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is only needed for MongoDB

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String
}
