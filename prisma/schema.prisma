// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ChoreType {
  Bathroom
  Kitchen
  Bedroom
  Corridor
  Other
}

enum Status {
  Pending
  Completed
  Cancelled
}

enum Role {
  Standard
  Admin
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id                 String            @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is only needed for MongoDB
  email              String            @unique
  emailVerified      DateTime?         @map("email_verified")
  firstName          String            @map("first_name")
  lastName           String            @map("last_name")
  role               Role              @default(Standard)
  password           String
  houseId            String?           @map("house_id") @db.ObjectId
  salt               String
  createdAt          DateTime          @default(now()) @map("createdAt")
  updatedAt          DateTime          @updatedAt @map("updatedAt")
  paymentAsPayer     Payment[]         @relation(name: "payer")
  paymentAsRecipient Payment[]         @relation(name: "recipient")
  choreAssignments   ChoreAssignment[]
  accounts           Account[]
  sessions           Session[]
  House              House?            @relation(fields: [houseId], references: [id])

  @@map("users")
}

model House {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is only needed for MongoDB
  name             String
  createdAt        DateTime          @default(now()) @map("createdAt")
  invitationCode   String            @unique @map("invitation_code")
  updatedAt        DateTime          @updatedAt @map("updatedAt")
  choreAssignments ChoreAssignment[]
  users            User[]
  chores           Chore[]
  payments         Payment[]

  @@map("houses")
}

model Chore {
  id               String            @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is only needed for MongoDB
  title            String
  description      String
  type             ChoreType
  owner            String?           @db.ObjectId
  createdAt        DateTime          @default(now()) @map("createdAt")
  updatedAt        DateTime          @updatedAt @map("updatedAt")
  choreAssignments ChoreAssignment[]
  Owner            House?            @relation(fields: [owner], references: [id])

  @@map("chores")
}

model ChoreAssignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  Chore     Chore    @relation(fields: [choreId], references: [id])
  choreId   String   @map("chore_id") @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @map("user_id") @db.ObjectId
  status    Status
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")
  dueDate   DateTime @map("due_date")
  House     House?   @relation(fields: [houseId], references: [id])
  houseId   String?  @db.ObjectId

  @@map("choreassignments")
}

model Payment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // @default(auto()) is only needed for MongoDB
  amount      Float
  status      Status
  description String
  createdAt   DateTime @default(now()) @map("createdAt")
  updatedAt   DateTime @updatedAt @map("updatedAt")
  houseId     String   @map("houseId") @db.ObjectId
  House       House    @relation(fields: [houseId], references: [id])
  Recipient   User     @relation(name: "recipient", fields: [recipientId], references: [id])
  recipientId String   @map("recipientId") @db.ObjectId
  Payer       User     @relation(name: "payer", fields: [payerId], references: [id])
  payerId     String   @map("payerId") @db.ObjectId

  @@map("payments")
}
